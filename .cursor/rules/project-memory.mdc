---
description: 
globs: 
alwaysApply: false
---
# MEMORIA DEL PROYECTO AUTO-PUBLISH

## CONTEXTO GENERAL
Sistema automatizado para generar contenido estilo podcast desde detecci√≥n de tendencias hasta entrega final de video con subt√≠tulos.

## ARQUITECTURA ELEGIDA
- **Tipo**: Sistema de m√≥dulos independientes con contratos estrictos
- **Validaci√≥n**: Estricta, falla r√°pido, sin adaptaciones autom√°ticas
- **Desarrollo**: Un m√≥dulo por sesi√≥n para mantener contexto profundo
- **Orquestaci√≥n**: Central con registro din√°mico de contratos

## DECISIONES CR√çTICAS TOMADAS

### Arquitect√≥nicas:
- ‚úÖ Sistema estricto vs adaptativo (elegido: estricto)
- ‚úÖ M√≥dulos independientes vs monol√≠tico (elegido: independientes)
- ‚úÖ Contratos TypeScript con validaci√≥n runtime
- ‚úÖ Rules de Cursor para mantener contexto persistente

### Tecnol√≥gicas:
- ‚úÖ Node.js + JavaScript para m√≥dulos
- ‚úÖ TypeScript para contratos
- ‚úÖ Jest para testing
- ‚úÖ ESLint para calidad de c√≥digo

## ESTADO ACTUAL DEL PROYECTO

### M√ìDULOS COMPLETADOS ‚úÖ

#### 1. trend-detector (v1.0.0) - COMPLETADO
**Ubicaci√≥n**: `modules/trend-detector/`
**Estado**: ‚úÖ Listo para producci√≥n
**Archivos**:
- ‚úÖ `contract.ts` - Contrato estricto definido
- ‚úÖ `index.js` - Implementaci√≥n completa con validaciones
- ‚úÖ `README.md` - Documentaci√≥n completa
- ‚úÖ `package.json` - Dependencias y scripts
- ‚úÖ `tests/index.test.js` - Suite de tests completa

**Funcionalidad**:
- Detecta tendencias de Google Trends, Reddit, Twitter
- Selecciona subnichos con algoritmo ponderado
- Validaci√≥n estricta de input/output
- Manejo robusto de errores
- M√©tricas de rendimiento y costos

**Input**: Opcional (keywords, sources, timeframe, region, filters)
**Output**: selectedNiche + alternatives + metadata
**Duraci√≥n**: ~45 segundos
**Costo**: ~$0.15 USD

### M√ìDULOS PENDIENTES üîÑ

#### 2. topic-researcher (Siguiente)
**Prop√≥sito**: Investigaci√≥n profunda del tema seleccionado
**Input esperado**: selectedNiche del trend-detector
**Output esperado**: Investigaci√≥n detallada + fuentes + datos

#### 3. script-generator
**Prop√≥sito**: Generar gui√≥n estilo podcast
**Input esperado**: Investigaci√≥n del topic-researcher
**Output esperado**: Gui√≥n estructurado + metadatos

#### 4. audio-synthesizer
**Prop√≥sito**: Convertir gui√≥n a audio con TTS
**Input esperado**: Gui√≥n del script-generator
**Output esperado**: Archivo de audio + transcripci√≥n

#### 5. subtitle-generator
**Prop√≥sito**: Generar subt√≠tulos sincronizados
**Input esperado**: Audio del audio-synthesizer
**Output esperado**: Archivos SRT/VTT + texto limpio

#### 6. video-composer
**Prop√≥sito**: Combinar audio + subt√≠tulos + fondo visual
**Input esperado**: Audio + subt√≠tulos
**Output esperado**: Video final MP4

#### 7. delivery-manager
**Prop√≥sito**: Entregar contenido final
**Input esperado**: Video del video-composer
**Output esperado**: Entrega local/remota + reporte

## PR√ìXIMOS PASOS INMEDIATOS

1. **Crear m√≥dulo topic-researcher**
   - Definir contrato estricto
   - Implementar investigaci√≥n web real
   - Conectar con output de trend-detector

2. **Crear orquestador central**
   - Registry de contratos din√°mico
   - Validador de conexiones estricto
   - Ejecutor de flujos

3. **Testing de integraci√≥n**
   - Probar conexi√≥n trend-detector ‚Üí topic-researcher
   - Validar contratos en runtime

## REGLAS DE DESARROLLO ACTIVAS

### Para Nuevos M√≥dulos:
1. **SIEMPRE** crear contrato TypeScript primero
2. **SIEMPRE** implementar validaci√≥n estricta
3. **SIEMPRE** incluir tests completos
4. **SIEMPRE** documentar en README
5. **SIEMPRE** actualizar esta memoria

### Para Conexiones:
1. **NUNCA** adaptar autom√°ticamente formatos
2. **SIEMPRE** validar compatibilidad estricta
3. **SIEMPRE** fallar r√°pido en incompatibilidades
4. **SIEMPRE** documentar dependencias

## M√âTRICAS DEL PROYECTO

### M√≥dulos Completados: 1/7 (14%)
### Tests Pasando: ‚úÖ trend-detector (100% coverage esperado)
### Contratos Definidos: 1/7
### Documentaci√≥n: ‚úÖ Completa para trend-detector

## LECCIONES APRENDIDAS

1. **Contratos estrictos funcionan**: Evitan errores de integraci√≥n
2. **Validaci√≥n runtime es cr√≠tica**: TypeScript solo no es suficiente
3. **Tests exhaustivos son esenciales**: Detectan problemas temprano
4. **Documentaci√≥n viva es clave**: README debe ser la fuente de verdad

## √öLTIMA ACTUALIZACI√ìN
**Fecha**: 2025-01-06
**M√≥dulo**: trend-detector completado
**Siguiente**: Iniciar topic-researcher
**Responsable**: Claude AI en sesi√≥n de desarrollo modular


